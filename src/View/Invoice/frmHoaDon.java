/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View.Invoice;

import Controller.HoaDonController;
import Model.HoaDon;
import Model.SanPham;
import View.Invoice.ThemHoaDon;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Manh
 */
public class frmHoaDon extends javax.swing.JPanel {

    private boolean cothem = true;
    private final HoaDonController iv = new HoaDonController();
    private final DefaultTableModel tableModel = new DefaultTableModel();

    /**
     * Creates new form frmInvoice
     */
    public frmHoaDon() throws SQLException {
        initComponents();
        initComponents();
        String[] colsName = {"Id", "Mã Số Hóa Đơn", "Tên Khách Hàng", "Tổng Tiền", "Tiền Thuế", "Ngày Lập Hóa Đơn", "Hạn Thanh Toán", "Trạng Thái"}; // Đặt tiêu đề cột cho tableModel        
        tableModel.setColumnIdentifiers(colsName);
        tblHoaDon.setModel(tableModel); // Kết nối jtable với tableModel
        hienThiDuLieu();

    }

    public void hienThiDuLieu() throws SQLException {
        // Lấy danh sách hóa đơn từ cơ sở dữ liệu
        List<HoaDon> danhSach = iv.getTatCaHoaDon();
        try {
            // Xóa dữ liệu cũ trước khi thêm mới
            tableModel.setRowCount(0);

            // Duyệt qua từng dòng của danh sách
            for (HoaDon item : danhSach) {
                // Tính tổng tiền cho hóa đơn
                BigDecimal tongTien = iv.tinhTongTienHoaDon(item.getHoaDonId());
                item.setTongTien(tongTien);

                // Tính tiền thuế là 10% của tổng tiền
                BigDecimal thueTien = tongTien.multiply(BigDecimal.valueOf(0.1));
                item.setThueTien(thueTien);

                // Tạo một mảng đối tượng cho mỗi dòng
                Object[] rows = {
                    item.getHoaDonId(),
                    item.getSoHoaDon(),
                    item.getKhachHang().getTen(),
                    item.getTongTien(),
                    item.getThueTien(),
                    item.getNgayLapHoaDon(),
                    item.getNgayHanThanhToan(),
                    item.getTrangThai()
                };
                // Thêm dòng dữ liệu vào tableModel
                tableModel.addRow(rows);
            }
        } catch (Exception e) {
            // Xử lý các lỗi khác
            System.err.println("Đã có lỗi xảy ra: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        btnAddInvoice = new javax.swing.JButton();
        btnUpdateInvoice = new javax.swing.JButton();
        btnDeleteInvoice = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiemHoaDon = new javax.swing.JTextField();

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Số hóa đơn", "Khách hàng", "Tổng số tiền", "Tiền thuế", "Ngày lập hóa đơn", "Hạn thạnh toán hóa đơn", "Trạng thái"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHoaDon);

        btnAddInvoice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddInvoice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/8666718_plus_circle_icon.png"))); // NOI18N
        btnAddInvoice.setText("Thêm");
        btnAddInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvoiceActionPerformed(evt);
            }
        });

        btnUpdateInvoice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdateInvoice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/8666806_edit_write_pen_icon (1).png"))); // NOI18N
        btnUpdateInvoice.setText("Sửa");
        btnUpdateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateInvoiceActionPerformed(evt);
            }
        });

        btnDeleteInvoice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteInvoice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/8666597_trash_2_icon.png"))); // NOI18N
        btnDeleteInvoice.setText("Xóa");
        btnDeleteInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteInvoiceActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Search:");

        txtTimKiemHoaDon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemHoaDonKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtTimKiemHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(btnAddInvoice)
                .addGap(47, 47, 47)
                .addComponent(btnUpdateInvoice)
                .addGap(39, 39, 39)
                .addComponent(btnDeleteInvoice)
                .addContainerGap(210, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddInvoice)
                    .addComponent(btnUpdateInvoice)
                    .addComponent(btnDeleteInvoice)
                    .addComponent(jLabel1)
                    .addComponent(txtTimKiemHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInvoiceActionPerformed
        ThemHoaDon addinvoice = new ThemHoaDon(this); // Truyền tham chiếu của frmInvoice
        addinvoice.setVisible(true);
    }//GEN-LAST:event_btnAddInvoiceActionPerformed

    private void btnDeleteInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteInvoiceActionPerformed
        int row = this.tblHoaDon.getSelectedRow();
// Kiểm tra nếu không có dòng nào được chọn
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Chọn một hóa đơn để xóa", "Thông báo", JOptionPane.WARNING_MESSAGE);
        } else {
            // Lấy ID hóa đơn từ cột đầu tiên (cột 0)
            int id = Integer.parseInt(this.tblHoaDon.getModel().getValueAt(row, 0).toString());
            try {
                // Xác nhận xóa
                int option = JOptionPane.showConfirmDialog(null, "Bạn muốn xóa hóa đơn " + id + " này hay không?", "Thông báo", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    iv.xoaHoaDon(id); // Gọi hàm xóa dữ liệu theo mã hóa đơn
                    xoaDuLieu(); // Xóa dữ liệu trong tableModel
                    hienThiDuLieu(); // Đưa dữ liệu vào tableModel
                }
            } catch (SQLException ex) {
                // Nếu có lỗi khi xóa, thông báo lỗi
                JOptionPane.showMessageDialog(null, "Xóa thất bại: " + ex.getMessage(), "Thông báo", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace(); // In chi tiết lỗi ra console để dễ debug
            }
        }

    }//GEN-LAST:event_btnDeleteInvoiceActionPerformed

    private void btnUpdateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateInvoiceActionPerformed
        int selectedRow = tblHoaDon.getSelectedRow(); // Kiểm tra xem đã chọn một hàng trong bảng chưa

        if (selectedRow >= 0) {
            try {
                // Lấy dữ liệu từ hàng đã chọn
                int hoaDonId = parseInteger(tblHoaDon.getValueAt(selectedRow, 0)); // Lấy ID hóa đơn
                String soHoaDon = tblHoaDon.getValueAt(selectedRow, 1) != null ? tblHoaDon.getValueAt(selectedRow, 1).toString() : ""; // Lấy số hóa đơn
                String tenKhachHang = tblHoaDon.getValueAt(selectedRow, 2) != null ? tblHoaDon.getValueAt(selectedRow, 2).toString() : ""; // Lấy tên khách hàng

                // Chuyển đổi giá trị từ String sang BigDecimal
                BigDecimal tongTien = parseBigDecimal(tblHoaDon.getValueAt(selectedRow, 3));
                BigDecimal thueTien = parseBigDecimal(tblHoaDon.getValueAt(selectedRow, 4));

                // Chuyển đổi từ String hoặc sql.Date sang java.util.Date
                Date ngayLapHoaDon = parseDate(tblHoaDon.getValueAt(selectedRow, 5));
                Date ngayHanThanhToan = parseDate(tblHoaDon.getValueAt(selectedRow, 6));

                String trangThai = tblHoaDon.getValueAt(selectedRow, 7) != null ? tblHoaDon.getValueAt(selectedRow, 7).toString() : ""; // Lấy trạng thái

                // Mở form cập nhật hóa đơn
                CapNhatHoaDon capNhatHoaDon = new CapNhatHoaDon(
                        this, hoaDonId, soHoaDon, tenKhachHang, tongTien, thueTien, ngayLapHoaDon, ngayHanThanhToan, trangThai
                );
                capNhatHoaDon.setVisible(true); // Hiển thị form

            } catch (Exception e) {
                // Xử lý lỗi và hiển thị thông báo lỗi
                JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi lấy dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace(); // In chi tiết lỗi ra console để dễ debug
            }
        } else {
            // Thông báo khi không có hàng nào được chọn
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để cập nhật", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnUpdateInvoiceActionPerformed
// Hàm trợ giúp chuyển đổi kiểu Integer

    private int parseInteger(Object value) {
        if (value != null && !value.toString().isEmpty()) {
            try {
                return Integer.parseInt(value.toString());
            } catch (NumberFormatException e) {
                return 0; // Hoặc bạn có thể trả về giá trị mặc định khác
            }
        }
        return 0;
    }

// Hàm trợ giúp chuyển đổi kiểu BigDecimal
    private BigDecimal parseBigDecimal(Object value) {
        if (value != null && !value.toString().isEmpty()) {
            try {
                return new BigDecimal(value.toString().replace(",", ""));
            } catch (NumberFormatException e) {
                return BigDecimal.ZERO; // Hoặc bạn có thể trả về giá trị mặc định khác
            }
        }
        return BigDecimal.ZERO;
    }

// Hàm trợ giúp chuyển đổi kiểu Date
    private Date parseDate(Object value) {
        if (value != null) {
            try {
                return new java.util.Date(((java.sql.Date) value).getTime());
            } catch (Exception e) {
                return null; // Hoặc trả về giá trị mặc định
            }
        }
        return null;
    }
    private void txtTimKiemHoaDonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemHoaDonKeyReleased
        String keyword = txtTimKiemHoaDon.getText(); // Lấy từ khóa tìm kiếm từ ô nhập liệu
        try {
            List<HoaDon> danhSach;

            if (keyword.isEmpty()) {
                // Nếu ô tìm kiếm trống, hiển thị tất cả hóa đơn
                danhSach = iv.getTatCaHoaDon();
            } else {
                // Gọi phương thức tìm kiếm để tìm các hóa đơn theo từ khóa
                danhSach = iv.timKiemHoaDon(keyword);
            }

            // Xóa dữ liệu cũ trong tableModel trước khi thêm dữ liệu mới
            xoaDuLieu();

            // Thêm các dòng dữ liệu vào tableModel
            for (HoaDon item : danhSach) {
                Object[] rows = {
                    item.getHoaDonId(),
                    item.getSoHoaDon(),
                    item.getKhachHang().getTen(),
                    item.getTongTien(),
                    item.getThueTien(),
                    item.getNgayLapHoaDon(),
                    item.getNgayHanThanhToan(),
                    item.getTrangThai()
                };
                tableModel.addRow(rows); // Thêm dòng dữ liệu mới vào tableModel
            }
        } catch (SQLException e) {
            // Xử lý lỗi khi có lỗi trong quá trình truy vấn cơ sở dữ liệu
            JOptionPane.showMessageDialog(this, "Lỗi khi truy vấn dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // In chi tiết lỗi ra console để dễ debug
        }

    }//GEN-LAST:event_txtTimKiemHoaDonKeyReleased

    public void xoaDuLieu() throws SQLException {
//Lay chi so dong cuoi cung
        int n = tableModel.getRowCount() - 1;
        for (int i = n; i >= 0; i--) {
            tableModel.removeRow(i);//Remove tung dong
        }
    }

    public void refreshData() throws SQLException {
        hienThiDuLieu(); // Gọi phương thức hiện tại để cập nhật dữ liệu
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddInvoice;
    private javax.swing.JButton btnDeleteInvoice;
    private javax.swing.JButton btnUpdateInvoice;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTextField txtTimKiemHoaDon;
    // End of variables declaration//GEN-END:variables
}
